from flask import Flask, jsonify, abort, make_response, request, url_for,session
from flask import render_template, redirect
import json
import re
import requests 
import hashlib
import os
from web3 import Web3

rpc = "http://localhost:7545"

web3 = Web3(Web3.HTTPProvider(rpc))

web3.eth.default_account = web3.eth.accounts[0]

abi = json.loads('[{"constant":true,"inputs":[],"name":"candidatesCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","signature":"0x2d35a8a2"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"candidates","outputs":[{"name":"id","type":"uint256"},{"name":"name","type":"string"},{"name":"voteCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","signature":"0x3477ee2e"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"voters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","signature":"0xa3ec138d"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor","signature":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_candidateId","type":"uint256"}],"name":"votedEvent","type":"event","signature":"0xfff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b16"},{"constant":false,"inputs":[],"name":"end","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"0xefbe1c1c"},{"constant":false,"inputs":[{"name":"_candidateId","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"0x0121b93f"}]')
# abi = json.loads('[{"constant":false,"inputs":[{"name":"_candidateId","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"candidatesCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"candidates","outputs":[{"name":"id","type":"uint256"},{"name":"name","type":"string"},{"name":"voteCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"voters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"end","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_candidateId","type":"uint256"}],"name":"votedEvent","type":"event"}]')
# contract_addr = "0xb90bE841035E76412ff5538fC08d638e5c5C0584"
bytecode = "608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506100786040805190810160405280600b81526020017f43616e6469646174652031000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6100c56040805190810160405280600b81526020017f43616e6469646174652032000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6101126040805190810160405280600b81526020017f43616e6469646174652033000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b61015f6040805190810160405280600b81526020017f43616e6469646174652034000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6101ac6040805190810160405280600b81526020017f43616e6469646174652035000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6101f96040805190810160405280600b81526020017f43616e6469646174652036000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6102466040805190810160405280600b81526020017f43616e6469646174652037000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6102936040805190810160405280600b81526020017f43616e6469646174652038000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b6102e06040805190810160405280600b81526020017f43616e6469646174652039000000000000000000000000000000000000000000815250610332640100000000026401000000009004565b61032d6040805190810160405280600c81526020017f43616e6469646174652031300000000000000000000000000000000000000000815250610332640100000000026401000000009004565b610454565b6003600081548092919060010191905055506060604051908101604052806003548152602001828152602001600081525060026000600354815260200190815260200160002060008201518160000155602082015181600101908051906020019061039e9291906103af565b506040820151816002015590505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103f057805160ff191683800117855561041e565b8280016001018555821561041e579182015b8281111561041d578251825591602001919060010190610402565b5b50905061042b919061042f565b5090565b61045191905b8082111561044d576000816000905550600101610435565b5090565b90565b610598806104636000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630121b93f146100725780632d35a8a21461009f5780633477ee2e146100ca578063a3ec138d1461017e578063efbe1c1c146101d9575b600080fd5b34801561007e57600080fd5b5061009d600480360381019080803590602001909291905050506101f0565b005b3480156100ab57600080fd5b506100b4610468565b6040518082815260200191505060405180910390f35b3480156100d657600080fd5b506100f56004803603810190808035906020019092919050505061046e565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610141578082015181840152602081019050610126565b50505050905090810190601f16801561016e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561018a57600080fd5b506101bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610530565b604051808215151515815260200191505060405180910390f35b3480156101e557600080fd5b506101ee610550565b005b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156102b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f416c726561647920766f7465640000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811180156102c457506003548111155b1515610338576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c69642063616e64696461746500000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900460ff1615156103bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f456c656374696f6e20656e64656400000000000000000000000000000000000081525060200191505060405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002600082815260200190815260200160002060020160008154809291906001019190505550807ffff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b1660405160405180910390a250565b60035481565b6002602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105205780601f106104f557610100808354040283529160200191610520565b820191906000526020600020905b81548152906001019060200180831161050357829003601f168201915b5050505050908060020154905083565b60016020528060005260406000206000915054906101000a900460ff1681565b60008060006101000a81548160ff0219169083151502179055505600a165627a7a723058205e44a22f6b867179e2b7f553c7debe5f89abfd3f050e3e5f4b4794f0a75520dd0029"
election = web3.eth.contract(abi=abi, bytecode=bytecode)
tx_hash = election.constructor().transact()
contract_address = web3.eth.waitForTransactionReceipt(tx_hash).contractAddress
print(contract_address)

app = Flask(__name__)
app.secret_key = 'i love white chocolate too'

accounts = [ 
    '0x6eA650705C9DbC666af8229F686Ac7299738966C',
    '0x22c9E89F973eBF4E341A6794F18a49DBE41A3B8f',
    '0x1887289412Db0bccf5b932DD4c39fEc3fA08AF0f',
    '0x782048109aaA297fe77b15B72fba7194Cfe42B9e',
    '0xDF6192571404C88b80278DBc62A58e98E58Ad50f',
    '0xA163fc757253aFeDB175352Efc64e9D0421f4376',
    '0x285492aCf64Dc630a234938F9222522C7f3D0c4f',
    '0x8D9398653Fc5f9c3cdCA9C010D8c89b9f390F181',
    '0x7Ce74342f7628120ae6dA683885cB13f11001a91',
    '0x259c04B3989e38c90413B8Bb1825a95edF1EE5ff' 
]

privatekeys = [
    'acc7f390c606115bf99091521097ed06ee0d25ce40d103046cfe11d5ccd159d5',
    'cce4810f305d4d945b36fdd0066c733cdf470d31466bfefd19eb1fe74fff8d10',
    'ccdc8ccf72f6a5c30699ba672aa62db9a561748da5f533320606ba2ba2eb6067',
    'd71182b1c406816ce128cee3b3fc5a26b097f232bf5198cbcf9fd7fb4c7bf84c',
    'c45d257248c925b3c3c61944e5ac287315c5314df0d714782bed901f2367b7d9',
    'a39681c921f619a399a566d1750b5124b6ce6a6a4603d70b1109c5935306c92a',
    'f5240b5e950ff1c3b918a5c976d767a3f62f0f8572a740cd978c537b7a7872c4',
    '30a902e078ea67eb09d415db90afd2b758cf736f9fd7c9b2aaa2d6e833c593e9',
    '19c6a0df8c496fc3e8af54662311a4b83559323f63482fdd13473a25df4e20fb',
    '313bd101262e389d0c7ffbde3d03b10304993cec3d92a5769b48238562d2877e'
]

vote_tx = []
voted = []
ended = 0

@app.route("/" , methods=['POST'])
def home():
    if(not ended):
        try:
            data = eval(request.data) # {"aadhaarID":int(),"candidateID":int()}
            aid = int(data["aadhaarID"])-1
            if(aid in voted):
                return "Already voted",400
            cid = int(data["candidateID"])
            acc = accounts[aid]
            pvt = privatekeys[aid]
            contract = web3.eth.contract(abi=abi, address=contract_address)
            transaction  = contract.functions.vote(cid).buildTransaction()
            transaction['nonce'] = web3.eth.getTransactionCount(acc)

            signed_tx = web3.eth.account.signTransaction(transaction, pvt)
            tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
            vote_tx.append(tx_hash)
            voted.append(aid)
            return "Vote successfully casted",200
        except:
            return "Error processing",500
    else:
        return "Election period ended",400

@app.route("/results" , methods=['GET'])
def count():
    if(ended):
            res = []
            election = web3.eth.contract(abi=abi, address=contract_address)
            for i in range(election.caller().candidatesCount()):    
                res.append(election.caller().candidates(i+1))
            return json.dumps(res),200
    else:
        return "Election still on going",400

@app.route("/end" , methods=['POST'])
def end_election():
    global ended
    ended += 1
    acc = '0x259c04B3989e38c90413B8Bb1825a95edF1EE5ff'
    pvt = '313bd101262e389d0c7ffbde3d03b10304993cec3d92a5769b48238562d2877e'
    contract = web3.eth.contract(abi=abi, address=contract_address)
    transaction  = contract.functions.end().buildTransaction()
    transaction['nonce'] = web3.eth.getTransactionCount(acc)

    signed_tx = web3.eth.account.signTransaction(transaction, pvt)
    tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
    return "Election successfully ended\nTx Hash : %s"%(str(tx_hash)),200

@app.route("/number_of_users" , methods=['GET'])
def number_of_users(): 
    try:
        return str(len(accounts)),200
    except:
        return "Error processing",500

@app.route("/isended" , methods=['GET'])
def isended(): 
    return str(ended>0),200

@app.route("/candidates_list" , methods=['GET'])
def candidates_list():
    try:
        res = []
        election = web3.eth.contract(abi=abi, address=contract_address)
        print(election)
        for i in range(election.caller().candidatesCount()):    
            res.append(election.caller().candidates(i+1)[1]) #name
        return json.dumps(res),200
    except:
        return "Error processing",500

if __name__ == '__main__':
	app.run(host="0.0.0.0" ,port=5000, debug = True)